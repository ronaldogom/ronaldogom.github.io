// home/ambj/asciidoc/asciidoc.py -f /home/ambj/asciidoc/xhtml11.conf -a scriptsdir=/home/ambj/asciidoc/javascripts/ -a stylesdir=/home/ambj/asciidoc/stylesheets/ -a mathjax equa.asc
= Relatório - 1ª Unidade

:autor: Ronaldo Gomes

[abstract]
Nesse documento serão mostrados como cada exercício proposto foi resolvido, com detalhes sobre os códigos implementados e imagens de cada exercício.

- Exercício 1
---------------
* Q1: O programa "quadrados4" foi feito criando 4 quadrados com a função glBegin(GL_POLYGON) e definindo quatro pontos para cada poligono. As cores foram definidas usando a função glColor3f().

image::images/quadrados4.png[]

* Q2: No programa "quadradoscolor" é necessário, inicialmente, definir um angulo h para cado canto do quadrado de forma que cada canto inicia com cores diferentes entre si. Na medida que as cores r(red), g(green) e b(blue) são calculados para cada canto do quadrado, usando a função convert, e ao comentar a função glShadeModel (GL_FLAT) é possível notar toda a transição das cores em cada canto.

image::images/quadradoscolor.png[]

- Exercício 2
---------------
* Q1: Nessa questão, o programa "quadrado" mostra um quadrado criado com a função glBegin(GL_POLYGON) com 4 vértices de acordo com o que foi pedido. Ao se pressionar a letra "a" o quadrado se torna azul, ao se pressionar a letra "v" é pressionada o quadrado se torna vermelho. Para que as cores variem, a função glColor3f() recebe três variáveis: "r". "g", "b" que são de escopo global, por tanto, com o uso de uma função de interação com o teclado, é possível testar qual tecla foi pressionada e assim mudar a cor do quadrado de acordo com o que foi definido.

image::images/quadrado.png[]
image::images/quadrado2.png[]

* Q2: No programa "bresenham_linha" foi desenhado uma linha de cor verde entre dois pontos determinados previamente. Para desenhar a linha, foi usado o algoritmo de bresenham para linhas e para desenhar cada pixel foi usado a função glVertex2i() mas usando também a função glBegin(GL_POINTS) para que cada ponto seja desenhado individualmente.

image::images/bresenham_linha.png[]

* Q3: Para fazer o desenho de uma circunferência, de acordo com o que foi determinado na questão, foi usado o algoritmo de bresenham para circunferências para o primeiro octal e replicando cada ponto em sua respectiva posição em cada um dos outros 7 octantes. Mais uma vez foi usada a função glBegin(GL_POINTS) para desenhar pontos individuais. Um detalhe está na configuração inicial opengl, com a função glOrtho() foi levado a origem do sistema de coordenadas para o centro da imagem, facilitando o entendimento e a implementação do código.

image::images/circunferencia.png[]


- Exercício 3
---------------
* Q1: No programa "selecao" os quatro quadrados, na verdade, são 8 quadrados. Para que cada quadrado possua borda e preenchimento, foi necessário por um quadrado sem preenchimento e com bordas pretas por cima de um segundo quadrado com preenchimento de cor amarela. Cada borda e quadrado de preenchimento possui sua variável de cor independente, por tanto é possível mudar a cor de apenas aquele quadrado (borda ou preenchimento). A função de teclado vai definir se a borda ou o preenchimento mudará de cor, e a posição do mouse defini qual borda ou preenchimento mudará.

image::images/selecao.png[]

* Q2: Mudando o buffer para simples não surtiu efeito notável no resultado final, provavelmente por causa do processamento atual mais poderoso.

* Q3: O programa "padrao" preenche um exágono dentro de uma bounding box de 200px por 200px com um padrão de preenchimento com as iniciais R e G, de Ronaldo Gomes. Para desenhar o padrão de preenchimento, foi usada uma matriz onde os valores em hexadecimal definem quais pixels serão ativados. Para usar esse preenchimento a função glEnable(GL_POLYGON_STIPPLE) ativa a opção de usar de fato um padrão, em seguida a função glPolygonStipple() recebe a matriz e interpreta os valores dela para ativar os pixels.

image::images/padrao.png[]

- Exercício 4
---------------
* Q1: Para criar os dedos do braço robótico é preciso ter nosção de onde levar o centro de coodenadas de modo a selecionar o ponto correto para definir a rotação de cada dedo, e onde ir para definir o centro de cada dedo para então desenha-lo. Foi preciso notar que, após desenhar um dedo, é necessário voltar para as coordenadas no centro do antebraço do robô, pois a partir desse ponto serão definidas as bases para os outros dedos. Para voltar para o centro do antebraço, todas as mudanças feitas para cirar os dedos fica salvo em uma matrix na pilha, logo, ao terminar de desenhar o dedo, basta desempilhar a matriz que o antigo centro de coordenadas é restaurado, a função glPushMatrix() salva todas as modificações feitas depois dela até chegar na função glPopMatrix(), que desempilha a matriz e retoma para as configurações da matriz no topo da pilha.

image::images/braco-garra.png[]

* Q2: Baseado no programa anterior, o programa "braco-garra-3d" cria um braço robótico mas desenha o braço sólido, com cores e profundidade. Usando as funções glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH), glutSolidCube(), glEnable(GL_DEPTH_TEST) e glEnable(GL_CULL_FACE), o opengl cria objetos em 3d em forma sólida. Para fazer o braço girar, foi adcionado o comando glRotatef ((GLfloat) around, 0.0, 1.0, 0.0), onde a variável "around" guarda o quanto o braço rotacionará no eixo y toda vez que for requisitado.

image::images/braco3d.png[]
